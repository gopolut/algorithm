# Выписываем все целые числа от 0 до nn. Сразу помечаем,
# что числа 0 и 1 не являются простыми (записываем на соответствующих этим числам позициях False).

# Заводим переменную \mathrm{num}num, равную первому не рассмотренному простому числу. Изначально она равна 2.

# Помечаем в списке числа от 2 \cdot \mathrm{num}2⋅num до nn с шагом, равным \mathrm{num}num, составными.
# Например, для 2 пометим значением False чётные числа — 4, 6, 8 и так далее.

# Теперь в \mathrm{num}num присваиваем следующее простое число,
# то есть следующее не рассмотренное число в списке. Для этого достаточно увеличивать \mathrm{num}num с шагом 1,
# пропуская числа, отмеченные как составные. На первом найденном простом числе следует остановиться.

# Повторяем два предыдущих шага, пока это возможно.


def eratosthenes(n):
    numbers = list(range(n + 1))
    numbers[0] = numbers[1] = False
    for num in range(2, n):
        if numbers[num]:
            for j in range(2 * num, n + 1, num):
                numbers[j] = False
    return numbers

n = 9
print(eratosthenes(n))
